
<sql>
  <postgre_sql>
    <nameOfSqlDatabase>Postgre SQL</nameOfSqlDatabase>




   <function>
      <old_name>fct_delete() </old_name>
      <nameOfFunction>fct_delete( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	DECLARE
	f_upd     varchar(400);
	v_delete varchar(20) ;
	BEGIN
	    v_delete   := ''delete'' ;
	    f_upd := '' update '' || TG_RELNAME  || '' set status =  ''|| quote_literal(v_delete) || ''  where id = '' || OLD.id   ;
	    RAISE NOTICE '' table-name =  % '', TG_RELNAME ;
	    RAISE NOTICE '' sql =  % '',f_upd  ;
	    execute f_upd ;
	    RAISE NOTICE '' Name =  % '', TG_NAME ;
 	    RETURN NULL ;
	END;
      </textOfFunction>
   	<description>if delete a record, dont realy delete, set status to delete </description>

    </function>

<function>
      <old_name>fct_update() </old_name>
      <nameOfFunction>fct_update( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	BEGIN
	    NEW.update_user_id = current_user   ;
	    NEW.update_time = (select  now()) ;
	    NEW.user_id = OLD.user_id;
                      NEW.insert_time = OLD.insert_time ;
                      NEW.status = 'update' ;
	    RAISE NOTICE ''Name =  % '', TG_NAME ;
	    RETURN NEW; 
	END;
      </textOfFunction>
   	<description>set the user_id to current_user </description>

    </function>
<function>
      <old_name>fct_insert() </old_name>
      <nameOfFunction>fct_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	BEGIN
	    NEW.user_id = current_user   ;
	    NEW.insert_time = (select  now()) ;
                      NEW.status = 'insert' ;
	    RAISE NOTICE ''Name =  % '', TG_NAME ;
	    RETURN NEW; 
	END;
      </textOfFunction>
   	<description>set the user_id to current_user </description>

    </function>
   <function>
      <old_name>fct_stock_goods_insert() </old_name>
      <nameOfFunction>fct_stock_goods_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	DECLARE
	f_upd     varchar(400);
	v_delete varchar(20) ;
                  v_actual_stock float;
	BEGIN
	    
	    f_upd := ''  update '' || TG_RELNAME || '' set actual_stock = (select sum(to_embed) - sum(roll_out) from '' || TG_RELNAME || '' where  stock_id = '' || NEW.stock_id || '' and article_id = '' || NEW.article_id ||'' )  where  id = '' || NEW.id   ;

	    RAISE NOTICE '' table-name =  % '', TG_RELNAME ;
	    RAISE NOTICE '' sql =  % '',f_upd  ;
	    RAISE NOTICE '' Name =  % '', TG_NAME ;
	    execute f_upd ;
 	    RETURN NEW ;
	END;
      </textOfFunction>
   	<description>if insert new goods, actual the stock, old = f_upd := '' select case when (select actual_stock from '' || TG_RELNAME || '' where id = (select max(id) from '' || TG_RELNAME || '' where stock_id = '' || NEW.stock_id || '' and article_id = '' || NEW.article_id ||'' ))  is  NULL  then  0 END  +  ''||  NEW.to_embed  -  NEW.roll_out || ''  into v_actual_stock from '' || TG_RELNAME  || ''  where id = '' || NEW.id   ;
 </description>

    </function>
    <trigger>
      <nameOfTrigger>trg_deleteAddress</nameOfTrigger>
      <table>address</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a address, check for use in order, then delete all partner </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateAddress</nameOfTrigger>
      <table>address</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update address </description>
      
    </trigger>
  <trigger>
      <nameOfTrigger>trg_deleteArticle</nameOfTrigger>
      <table>articles</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a article, check for use in order, then delete all partner </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertArticle</nameOfTrigger>
      <table>articles</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateArticle</nameOfTrigger>
      <table>articles</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_insertStockGoods</nameOfTrigger>
      <table>stock_goods</table>
      <action>after insert</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_stock_goods_insert() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>

  <trigger>
      <nameOfTrigger>trg_insertDMS</nameOfTrigger>
      <table>dms</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert dms </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteDMS</nameOfTrigger>
      <table>dms</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a dms, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateDMS</nameOfTrigger>
      <table>dms</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update dms </description>
      
    </trigger>

  </postgre_sql>
  
</sql>
