<sql>
  <postgre_sql>
    <nameOfSqlDatabase>Postgre SQL</nameOfSqlDatabase>
    
    <index>
        <index_name>address_idx_lastname</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>lastname</index_column>
    </index>
    <index>
        <index_name>address_idx_lastname2</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>lastname2</index_column>
    </index>
    <index>
        <index_name>address_idx_firstname</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>firstname</index_column>
    </index>
    <index>
        <index_name>address_idx_zip</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>zip</index_column>
    </index>
    <index>
        <index_name>address_idx_city</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>city</index_column>
    </index>
    
    
    <index>
        <index_name>partner_idx_lastname</index_name>
        <index_special> </index_special>
        <index_table>partner</index_table>
        <index_column>lastname</index_column>
    </index>
    
    <index>
        <index_name>partner_idx_addressid</index_name>
        <index_special> </index_special>
        <index_table>partner</index_table>
        <index_column>addressid</index_column>
    </index>
    
    
    <foreign_key>
            <foreign_key_name>PartnerAddress</foreign_key_name> 
            <foreign_key_sql>foreign key (addressid) references address (id) on delete restrict on update restrict </foreign_key_sql> 
        <foreign_table>address</foreign_table>
    </foreign_key>

        

   <function>
      <old_name>fct_delete() </old_name>
      <nameOfFunction>fct_delete( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	DECLARE
	f_upd     varchar(400);
	v_delete varchar(20) ;
	BEGIN
	    v_delete   := ''delete'' ;
	    f_upd := '' update '' || TG_RELNAME  || '' set status =  ''|| quote_literal(v_delete) || ''  where id = '' || OLD.id   ;
	    RAISE NOTICE '' table-name =  % '', TG_RELNAME ;
	    RAISE NOTICE '' sql =  % '',f_upd  ;
	    execute f_upd ;
	    RAISE NOTICE '' Name =  % '', TG_NAME ;
 	    RETURN NULL ;
	END;
      </textOfFunction>
   	<description>if delete a record, dont realy delete, set status to delete </description>

    </function>

<function>
      <old_name>fct_update() </old_name>
      <nameOfFunction>fct_update( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	BEGIN
      if not OLD.status = ''delete'' then 
            NEW.update_user_id = current_user   ;
            NEW.update_time = (select  now()) ;
            NEW.user_id = OLD.user_id;
                          NEW.insert_time = OLD.insert_time ;
                          NEW.status = ''update'' ;
            RAISE NOTICE ''Name =  % '', TG_NAME ;
            RETURN NEW; 
      else 
            RETURN OLD;
      end if \;
	END;
      </textOfFunction>
   	<description>set the user_id to current_user </description>

    </function>
<function>
      <old_name>fct_insert() </old_name>
      <nameOfFunction>fct_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	BEGIN
	    NEW.user_id = current_user   ;
	    NEW.insert_time = (select  now()) ;
                      NEW.status = ''insert'' ;
	    RAISE NOTICE ''Name =  % '', TG_NAME ;
	    RETURN NEW; 
	END;
      </textOfFunction>
   	<description>set the user_id to current_user </description>

    </function>
   <function>
      <old_name>fct_stock_goods_insert() </old_name>
      <nameOfFunction>fct_stock_goods_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
  	<textOfFunction>
	DECLARE
	f_upd     varchar(400);
	v_delete varchar(20) ;
                  v_actual_stock float;
	BEGIN
	    
	    f_upd := ''  update '' || TG_RELNAME || '' set actual_stock = (select sum(to_embed) - sum(roll_out) from '' || TG_RELNAME || '' where  stock_id = '' || NEW.stock_id || '' and article_id = '' || NEW.article_id ||'' )  where  id = '' || NEW.id   ;

	    RAISE NOTICE '' table-name =  % '', TG_RELNAME ;
	    RAISE NOTICE '' sql =  % '',f_upd  ;
	    RAISE NOTICE '' Name =  % '', TG_NAME ;
	    execute f_upd ;
 	    RETURN NEW ;
	END;
      </textOfFunction>
   	<description>if insert new goods, actual the stock, old = f_upd := '' select case when (select actual_stock from '' || TG_RELNAME || '' where id = (select max(id) from '' || TG_RELNAME || '' where stock_id = '' || NEW.stock_id || '' and article_id = '' || NEW.article_id ||'' ))  is  NULL  then  0 END  +  ''||  NEW.to_embed  -  NEW.roll_out || ''  into v_actual_stock from '' || TG_RELNAME  || ''  where id = '' || NEW.id   ;
 </description>

    </function>
    
    <trigger>
      <nameOfTrigger>trg_insertAddress</nameOfTrigger>
      <table>address</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert address </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_deleteAddress</nameOfTrigger>
      <table>address</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a address, check for use in order, then delete all CUON_CLIENTS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateAddress</nameOfTrigger>
      <table>address</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update address </description>
      
    </trigger>
    
  <trigger>
      <nameOfTrigger>trg_deleteArticle</nameOfTrigger>
      <table>articles</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a article, check for use in order, then delete all CUON_CLIENTS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertArticle</nameOfTrigger>
      <table>articles</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateArticle</nameOfTrigger>
      <table>articles</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_insertStockGoods</nameOfTrigger>
      <table>stock_goods</table>
      <action>after insert</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_stock_goods_insert() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>

  <trigger>
      <nameOfTrigger>trg_insertCUON_CLIENTS</nameOfTrigger>
      <table>CUON_CLIENTS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert CUON_CLIENTS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteCUON_CLIENTS</nameOfTrigger>
      <table>CUON_CLIENTS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a CUON_CLIENTS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateCUON_CLIENTS</nameOfTrigger>
      <table>CUON_CLIENTS</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update CUON_CLIENTS </description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertSTAFF</nameOfTrigger>
      <table>STAFF</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert STAFF </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteSTAFF</nameOfTrigger>
      <table>STAFF</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a STAFF, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateSTAFF</nameOfTrigger>
      <table>STAFF</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update STAFF </description>
      
    </trigger>
    
    
    
<trigger>
      <nameOfTrigger>trg_insertPROJECTS</nameOfTrigger>
      <table>PROJECTS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECTS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECTS</nameOfTrigger>
      <table>PROJECTS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECTS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECTS</nameOfTrigger>
      <table>PROJECTS</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECTS </description>
      
    </trigger>
    
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_TASKS</nameOfTrigger>
      <table>PROJECT_TASKS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_TASKS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_TASKS</nameOfTrigger>
      <table>PROJECT_TASKS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_TASKS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_TASKS</nameOfTrigger>
      <table>PROJECT_TASKS</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_TASKS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_TASK_STAFF_RES</nameOfTrigger>
      <table>PROJECT_TASK_STAFF_RES</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_TASK_STAFF_RES </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_TASK_STAFF_RES</nameOfTrigger>
      <table>PROJECT_TASK_STAFF_RES</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_TASK_STAFF_RES, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_TASK_STAFF_RES</nameOfTrigger>
      <table>PROJECT_TASK_STAFF_RES</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_TASK_STAFF_RES </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_TASK_MATERIAL_RES</nameOfTrigger>
      <table>PROJECT_TASK_MATERIAL_RES</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_TASK_MATERIAL_RES </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_TASK_MATERIAL_RES</nameOfTrigger>
      <table>PROJECT_TASK_MATERIAL_RES</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_TASK_MATERIAL_RES, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_TASK_MATERIAL_RES</nameOfTrigger>
      <table>PROJECT_TASK_MATERIAL_RES</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_TASK_MATERIAL_RES </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_PHASES</nameOfTrigger>
      <table>PROJECT_PHASES</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_PHASES </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_PHASES</nameOfTrigger>
      <table>PROJECT_PHASES</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_PHASES, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_PHASES</nameOfTrigger>
      <table>PROJECT_PHASES</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_PHASES </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertORDERBOOK</nameOfTrigger>
      <table>ORDERBOOK</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert ORDERBOOK </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteORDERBOOK</nameOfTrigger>
      <table>ORDERBOOK</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a ORDERBOOK, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateORDERBOOK</nameOfTrigger>
      <table>ORDERBOOK</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update ORDERBOOK </description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertDMS</nameOfTrigger>
      <table>DMS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert DMS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteDMS</nameOfTrigger>
      <table>DMS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a DMS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateDMS</nameOfTrigger>
      <table>DMS</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update DMS </description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertPARTNER_SCHEDUL</nameOfTrigger>
      <table>PARTNER_SCHEDUL</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PARTNER_SCHEDUL </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePARTNER_SCHEDUL</nameOfTrigger>
      <table>PARTNER_SCHEDUL</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PARTNER_SCHEDUL, set status to delete  </description>
      
    </trigger>
    
   
    <trigger>
      <nameOfTrigger>trg_insertCLIENTS</nameOfTrigger>
      <table>CLIENTS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert CLIENTS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteCLIENTS</nameOfTrigger>
      <table>CLIENTS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a CLIENTS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateCLIENTS</nameOfTrigger>
      <table>CLIENTS</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update CLIENTS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertBIBLIO</nameOfTrigger>
      <table>BIBLIO</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert BIBLIO </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteBIBLIO</nameOfTrigger>
      <table>BIBLIO</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a BIBLIO, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateBIBLIO</nameOfTrigger>
      <table>BIBLIO</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update BIBLIO </description>
      
    </trigger>
    
    <trigger>
      <nameOfTrigger>trg_insertListOfInvoices</nameOfTrigger>
      <table>list_of_invoices</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert invoice_number </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_deleteListOfInvoices</nameOfTrigger>
      <table>list_of_invoices</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a invoice, check for use in order, then delete the invoice </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateListOfInvoices</nameOfTrigger>
      <table>list_of_invoices</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update  list_of_invoice</description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertBOTANY</nameOfTrigger>
      <table>BOTANY</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert BOTANY </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteBOTANY</nameOfTrigger>
      <table>BOTANY</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a BOTANY, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateBOTANY</nameOfTrigger>
      <table>BOTANY</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update BOTANY </description>
      
    </trigger>
    
    <trigger>
      <nameOfTrigger>trg_insertHIBERNATION_PLANT</nameOfTrigger>
      <table>HIBERNATION_PLANT</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert HIBERNATION_PLANT </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteHIBERNATION_PLANT</nameOfTrigger>
      <table>HIBERNATION_PLANT</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a HIBERNATION_PLANT, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateHIBERNATION_PLANT</nameOfTrigger>
      <table>HIBERNATION_PLANT</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update HIBERNATION_PLANT </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertHIBERNATION</nameOfTrigger>
      <table>HIBERNATION</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert HIBERNATION </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteHIBERNATION</nameOfTrigger>
      <table>HIBERNATION</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a HIBERNATION, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateHIBERNATION</nameOfTrigger>
      <table>HIBERNATION</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update HIBERNATION </description>
      
    </trigger>
    
  </postgre_sql>
  
</sql>
