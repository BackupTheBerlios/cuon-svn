<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN"[
<!ENTITY cu "<productname>C.U.O.N.</productname>" >
]>
<book id="cuon" lang="de">
  <bookinfo>
    <title>C.U.O.N.</title>
    <authorgroup>
      <author>
	<firstname>Jürgen</firstname>
	<surname>Hamel</surname>
      </author>
    </authorgroup>
  </bookinfo>
   <chapter id="introduction">
    <title>&cu - eine  kfm. Entwicklungsumgebung</title>
    
    <para>
      Mit &cu sollten zwei Fliegen mit einer Klappe geschlagen werden: </para>
    <para>Zum ersten soll es eine kaufmännische Anwendung werden, die es einer Firma ermöglicht, den normalen Geschäftsbetrieb unter LINUX ablaufen zu lassen, das heißt also : Adressen erfassen, Artikel bearbeiten, Aufträge mit Lieferschein und Rechnung drucken, Termine wahrnehmen, etc. </para>
    <para>Aber mit &cu soll man auch einfach neue Module einbinden können, und es soll ein Webinterface vorhanden sein</para>
      <para>Schnell wurde klar, das mit PYTHON, GTK, GLADE,  ZOPE,  XML und POSTGRES die richtigen Partner zur Verfügung standen.       
    </para>

  </chapter>

  <part>
    <title>Bedienungsanleitung</title>
    <chapter>
      <title>Erste Schritte</title>
      <section>
	<title>Neuinstallation/Update</title>
      <para>Nach einer Neuinstallation oder einem Update starten sie noch vor dem Einloggen den Menüpunkt: </para>
      <para><emphasis>Werkzeuge --- Erneuern</emphasis></para>
      <para>Hiermit werden die entsprechenden neuen GUI-Elemente, reports, etc. auf das Home-Verzeichnis des Clients abgelegt.</para>
      </section>
      <section>
	<title>Benutzereinstellungen</title>
	<para>Nach dem Anmelden gehen Sie zu folgenden Menüpunkt: </para>
	<para><emphasis>Werkzeuge --- Einstellungen</emphasis></para>
	<para>Es öffnet sich ein Fenster, in dem Sie jetzt Ihre persönlichen Einstellungen vornehmen.</para>
	<para>Die Pfade zu den Reports und den Dokumenten sind in der Regel firmenspecifisch und entsprechend nachzufragen, ansonsten wird es im Home-Verzeichnis unter cuon abgelegt.</para>

      </section>
    </chapter>
    <chapter>
      <title>Adressverwaltung</title>
      <section>
	<title>Adressen</title>
	<para>In dieser Maske werden die Addressen eingegeben: </para>
	<para>
	  <figure id="screenaddresses1">
	    <title>Adressverwaltung - Adressen eingeben</title>
	    <graphic align="center" scale="30" scalefit="1" fileref="../images/screen_addresses_1.png" format="PNG"> 
	  </figure> 
	  Dies sollte normalerweise der Firmenname oder Familienname sein. Evtl. Gesprächspartner können beliebig viele in der Make Gesprächspartner erfaßt werden. 
	</para>

      </section>
    </chapter>
    <chapter>
      <title>Webinterface</title>
      <section>
	<title>Einleitung</title>
	<para>Wenn Sie in einem beliebigen Browser ( empfohlen wird mozilla) die Addresse Ihres Zope-Servers (im Normalfall http://server:9673/Cuon, SSL = https://server:8443/Cuon aufrufen</para>
      </section>
    </chapter>
  </part>
  <part>
    <title>Development</title>
   <chapter id="firststep">
    <title>Erste Schritte bei der Entwicklung von &cu</title>
    <para>
      Nach einigen Diskussionen wurde also beschlossen, ein Open-Source-Projekt zu entwickeln, das es uns und anderen Entwicklern ermöglicht, unsere Arbeit auf ein flesibles Fundament  aufzubauen. Dazu sollte das Projekt &cu folgende Voraussetzungen erfüllen:
      </para>
    <simplelist>
      <member>1. einfaches Erweitern für eigene Projekte</member>
      <member>2. einfaches Pflegen und Verändern der Module </member>
      <member>3. Standard sollte SQL und XML sein</member>
      <member>4. Python, C++ und C als Programmiersprache</member>
      <member>5. ZOPE als Aplication-Server
    </simplelist>


    <para>Dazu waren allerdings noch einige zusätzliche Vorüberlegungen notwendig. Bei kaufmännischen Anwendungen fällt auf, das ein Großteil der Datenoperationen ähnlich sind ( Adressen, Artikel, Aufträge, etc., alle werden neu angelegt, verändert und gelöscht. Dies heißt, das die Verarbeitung der Daten recht ähnlich ist. Das Aussehen der Eingabemasken wird allerdings mehr von der Eigenart der Daten bestimmt. Aus diesen Überlegungen bot sich folgende Vorgehensweise an. Die Fenster werden mit einem GUI-Builder, in unserem Fall GLADE, erzeugt. Das Aussehen kann frei definiert werden. Die Daten werden durch eine abgeleitete Klasse von SingleData, einem Modul, das für das Anlegen, Updaten und Löschen der Daten zuständig ist,  repräsentiert. 
    </para>

    <para>Um dies zu erreichen, hat ein Modul in &cu folgende Grundstruktur ( Beispiel Adressverwaltung ):
    
      <figure id="addresses1">
	<title>Beispiel Adressverwaltung</title>
	<graphic align="center" scale="30" scalefit="1" fileref="../images/cuon_1.png" format="PNG"> 
      </figure> 
    </para>
    
    
 
  </chapter>


  <chapter>
    <title>Die Praxis bei der Entwicklung neuer Module</title>
    <para>Um nun ein neues Modul, z.B. eine KFZ-Verwaltung einzubinden, sind folgende Schritte nötig:
    </para>
    <simplelist>
      <member>Neues Verzeichnis anlegen</member>
      <member>mit GLADE neue Bildschirmmaske erzeugen</member>
      <member>mit XML-Editor neue Datentabellen in tables.xml, ext*.xml anlegen</member>
      <member>Menüpunkte und Buttons mit CallbackRoutinen verbinden</member>
    </simplelist>
    
    <para>
      Wir legen also als erstes ein neues Verzeichnis in cuon/src/ mit dem Namen "Car" an. Für den nächsten Schritt nutzen wir ( Frau/Man macht sich sowenig Arbeit wie nötig ) ein vorhandenes Script. Im Verzeichnis cuon/src/Skeleton ist ein Gerüst für ein entsprechendes Programmodul vorbereitet. Mit "sh createModul.sh Car " werden die entsprechenden Dateien in das neuangelegte Verzeichnis kopiert und überarbeitet. Nun wird im Verzeichnis cuon/src/Car mit glade "car.glade" der GUI-Builder aufgerufen und das entsprechende Bildschirm-Design erarbeitet. Um immer gleiche, englischsprachige Menüs und Buttons zu haben, rufe ich immer "export LANG=;glade" auf. Das erleichtert das Design und die Portierung in verschiedenen sprachen, z.B. Deutsch.
    </para>
    <para>
      Die Datenbanktabellen werden durch 5 externe Dateien im XML-format gesteuert. Dabei gilt folgendes Regelwerk: Die Datei tables.xml ist für die Kerntabellen von &cu zuständig, ext1.dbd für &cu -Konfigurationstabellen sowie ext2.dbd für sonstiges. Die Dateien ext3.dbd und ext4.dbd sind für Ihre Projekt-eigenen Tabellen zuständig. Diese klare Trennung sorgt dafür, das sie mit &cu nach Herzenslust Programmieren können, ohne das spätere Versionen Ihre Daten überschreibt.
   
      Mit dem xml-Editor Ihrer Wahl ( wenn Sie noch keinen Lieblingseditor haben oder unsicher sind, schauen Sie in der Linux-Enterprise 07.2001 Seite 57ff nach. dort finden Sie eine reichliche auswahl), z.B. XEMACS, öffnen sie die Datei cuon/ext3.xml oder, falls Ihr Programm der Allgemeinheit zu Gute kommen soll, cuon/ext2.xml.
      Geplant ist auch hier die Nutzung eines ensprechenden tools, z.B. dbdesigner oder mergeant .  Hier bin ich allerdings noch am Testen. Für Vorschläge bin ich immer offen.
      
  
      </para>
    </chapter>
    <chapter>
      <title>Installation</title>
      <section>
	<title>Bezugsquellen</title>
	<para>&cu kann von <ulink url="http://developer.berlios.de/projects/cuon" > Berlios.de </ulink> herunterladen werden. Alternativ gibt es auf<ulink url="http://www.cyrus-computer.de/download">  www.cyrus.de </ulink> jeweils die neuste Version zum download.  </para>
      </section>
      <section>
	<title>Server Installation</title>
	<section>
	  <title>Zope</title>
	  <para>Auf der Serverseite muß ZOPE laufen. Da ich nicht weiß, wie die ZOPE-Module auf anderen Systemen heißen, hier kurz die Debianliste:
	    <simplelist>
	      <member>  libroxen-zopeg 1.6-3          Zope relay module for the Roxen Challenger w</member>
	      <member>  zope           2.6.1-10       An Open Source Web Application Server</member>
	      <member>  zope-book      20030918-1     Zope Open Content Book</member>
	      <member>  zope-btreefold 0.5.0-2        Zope folder that can contain many more objec</member>
	      <member>  zope-cmf       1.3.2-1        Zope Content Management Framework (CMF)</member>
	      <member>  zope-cmfcalend 1.3.2-1        Zope CMF Calendar</member>
	      <member>  zope-cmfcore   1.3.2-1        Zope CMF Core services</member>
	      <member>  zope-cmfdefaul 1.3.2-1        Zope CMF Default (basic) content</member>
	      <member>  zope-cmftopic  1.3.2-1        Zope CMF Topic</member>
	      <member>  zope-devguide  20011206-4     Zope Developer's Guide</member>
	      <member>  zope-parsedxml 1.3.1-3        ParsedXML Zope Product</member>
	      <member>  zope-psycopgda 1.1.5.1-1      Zope Database Adapter based on python-psycop</member>
	      <member>  zope-tinytable 0b2-8          Present tabular data in Zope</member>
	      <member>  zope-znavigato 2.02-6         Zope product for creating navigation bars</member>
	      <member>  zope-zpatterns 0.4.3p2-17     Database Independence and Framework Integrat</member>
	      <member>  zope-zwiki     0.18.0-1       WikiWikiWeb on Zope</member>
	      <member>  zopeedit       0.7-1          Helper Application for Zope External Editor</member>
	      
	    </simplelist>
	  </para>
	  
	  <para>Unter ZOPE müssen jetzt die ZOPE-Module von &cu importiert werden, sowie die externen Methoden aktualisiert werden</para>
	</section>
	<section>
	  <title>Postgres SQL</title>
	  <para>Postgres installieren, Database anlegen ( im Zweifelsfall cuon nennen ), grants.xml anppassen. Dieses XML-File von &cu verwaltet die USER und deren Rechte.</para>
	  <para>In der Konfigurationsdatei /etc/cuon/cuon.ini muß der SQL-Benutzer eingetragen werden. </para>
	  <para>Das Anlegen von proceduren und Triggern geschieht mit <emphasis>plpgsql</emphasis> Dies Sprache muß installiert sein. Folgender Aufruf prüft dies :</para>
	  <programlisting> 
/usr/lib/postgresql/bin/createlang -dcuon -l

Procedural languages
  Name   | Trusted?
---------+----------
 plpgsql | t
(1 Zeile)

</programlisting>
	  <para>Ist das Ergebnis ähnlich wie oben und wird<emphasis>plpgsql</emphasis> angezeigt, ist alles in Ordnung. Andernfalls führen Sie folgendes aus. ( Am besten als user postgres ) :  </para>
	  <programlisting>sh-2.05b$ /usr/lib/postgresql/bin/createlang -d cuon plpgsql</programlisting>
	</section>
      </section>
      
      
      <section>
	<title>Umgebungsvariablen</title>
	<para>Setzen der Umgebungsvariable (Beispiele) :</para>
	<para>1. Linux:</para>
	<para>in der .bashrc setzen sie bitte die Variablen (Hier mit Beispiel)  </para>
	<para> nur Server  "export CUON_INI=/etc/cuon/cuon.ini "</para>
	<para>Client und Server "export CUON_HOME=~/cuon " </para>
	<para>Client und Server "export CUON_SERVER=https://192.168.17.251:8443/Cuon, Hier gilt also IP_Adresse:Port/Verzeichnis ( ohne SSL ist der Port im Regelfall 9673 ) </para>
	<para>nur Client CUON_OOEXEC=/opt/OpenOffice.org1.1.0/program/python, dies ist das eingebaute Python von Openoffice für die uno-bridge </para>
	
	<para>Wichtig ist hierbei, das sich der Wert Server auf den Rechner bezieht, von dem aus das Program cuon_server gestartet wird. Dies kann durchaus ein Computer sein, der auch als client definiert ist oder eine normale Arbeitsstation ist. ( entsprechend muß die ip in cuon.ini angepaßt werden. </para>
      </section>
      <section>
	<title>Verzeichnisse</title>
	<para>Im Home-Verzeichnis ( siehe CUON_HOME ) müssen  und sollten folgende Verzeichnisse existieren:</para>
	<para>Reports</para>
	<para>Docs</para>
	<para>Am einfachsten werden diese und andere Verzeichnise mit der Datei /usr/lib/cuon/createUserDirs.sh angelegt</para>
      </section>
      <section>
	<title>Konfiguration</title>
	<section>
	  <title>SSL</title>
	  <para>Für die SSL-Verschlüsselung müssen Sie auf den ZOPE-Server das Paket zserverssl (m2crypto) installieren. Dann nehmen Sie bitte folgende Änderung vor:</para>
	  <para>in der Datei /usr/lib/zope/ZServer/medusa/https_server.py </para>
	  <programlisting>
	    class https_channel(http_server.http_channel):
	    # next 2 rows are important to use cuon
	    # if there not, you can only 4096 Byte Buffer use - very small
                      # and cuon do not run !!!
                                                          
	    ac_in_buffer_size = 65536
	    
	    ac_out_buffer_size = 65536
</programlisting>
	  <para>Auf dem client muß m2crypto installiert sein. </para>
	</section>
	<section>
	  <title>cuon_server</title>
	  <para>Wenn Sie cuon_server.py gestartet haben, klicken Sie folgenden Menüpunkte an: </para>
	  <para><emphasis>Tools --- Database --- SQL-Server --- db-check</emphasis></para>
	  <para>Hiermit werden die Postgres-Tabellen unter cuon erzeugt  </para>
	  <para>bevor Sie mit </para>
	  <para><emphasis>Tools --- Database --- SQL-Server --- grant</emphasis></para>
	  <para>die verschiedenen User und Gruppen anlegen</para>
	  <para>Anschließend führen Sie noch </para>
	  <para><emphasis>Tools --- Database --- XML-Tools --- load Defaults</emphasis></para>
	  <para>aus. Dies speichert die verschiedenen XML-Dateien für die z.B. GUI in eine objektorientierte Database auf den ZOPE-Server.</para>
	  
	</section>
	
      </section>
    </chapter>
    <chapter>
      <title>Benutzer</title>
      <para>Zuerst muß ein Benutzer angelegt werden.</para>
      <para> Ab Version 0.24 geschieht dies über die Datei grants.xml, später ist eine seperate Datei vorgesehen. Editeren sie die XML-Datei mit einem beliebige Editor und legen sie Ihren Benutzer an.</para>
      <para>Ab Version 0.25 können Sie Benutzer und Gruppen über ein Webinterface anlegen.</para>
      <para> Ordnen sie den Benutzer im zweifelsfalle der Gruppe cuon_all zu. Damit kann er so ziemlich alles in &cu machen. </para>
      <para>Eine vernünfitige Gruppenplanung sollte aber auf jeden Fall eingeführt werden.  </para>
    </chapter>
  </part>
  <part>
    <title>Impressum</title>
    <chapter>
      <title>Entwickler</title>
      <para>Jürgen Hamel</para>
      <simplelist>
	<member>email: jh@cyrus.de</member>
	<member>country: Germany</member>

      </simplelist>
    </chapter>
  </part>
</book>